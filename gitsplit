#!/usr/bin/env python

import os
import io
import sys
import yaml
import tempfile
import subprocess
import re
import hashlib
import argparse
from multiprocessing.pool import ThreadPool
from multiprocessing import Lock

CONFIG_FILE = ".gitsplit.yml"

class Utils:
    def resolve_path(self, path):
        if os.path.isabs(path):
            return path
        else:
            return os.path.join(os.getcwd(), path)

    def expandvars(self, string, default=None, skip_escaped=False):
        """Expand environment variables of form $var and ${var}.
           If parameter 'skip_escaped' is True, all escaped variable references
           (i.e. preceded by backslashes) are skipped.
           Unknown variables are set to 'default'. If 'default' is None,
           they are left unchanged.
        """
        def replace_var(m):
            return os.environ.get(m.group(2) or m.group(1), m.group(0) if default is None else default)
        reVar = r'\$(\w+|\{([^}]*)\})'
        return re.sub(reVar, replace_var, string)


    def sha256(self, text):
        return hashlib.sha256(text.encode()).hexdigest()

class Config:
    cache_dir = tempfile.mkdtemp()
    project_dir = os.getcwd()
    origins = []
    splits = []

    def __init__(self, utils):
        self.utils = utils
        self._normalize()

    def load_from_file(self, file_path):
        if not os.path.exists(file_path):
            raise Exception('Config fail not found at %s' % file_path)

        content = ''
        with open(file_path, 'r') as f:
            for line in f:
                content+=line

        file_config = yaml.safe_load(content)
        for item in ('cache_dir', 'project_dir', 'origins', 'splits'):
            if item in file_config:
                setattr(self, item, file_config[item])
        self._normalize()

    def _normalize(self):
        if not self.cache_dir.endswith('.git'):
            self.cache_dir = os.path.join(self.utils.resolve_path(self.utils.expandvars(self.cache_dir)), '.git')
        if not self.project_dir.endswith('.git'):
            self.project_dir = os.path.join(self.utils.resolve_path(self.utils.expandvars(self.project_dir)), '.git')
        if not self.origins:
            self.origins = ['.*']
        for split in self.splits:
            if not isinstance(split['prefix'], list):
                split['prefix'] = [split['prefix']]
            if not isinstance(split['target'], list):
                split['target'] = [split['target']]

class Logger:
    lock = Lock()
    colors = {
        'info': '1m',
        'debug': '0m',
    }

    def log(self, level, message):
        message = message.replace('<comment>', '\033[32m').replace('</>', '\033[0m\033[%s' % self.colors[level])
        try:
            self.lock.acquire()
            print('\033[%s%s\033[0m' % (self.colors[level], message))
        finally:
            self.lock.release()

    def info(self, message):
        self.log('info', message)

    def debug(self, message):
        self.log('debug', message)


class Process:
    def execute(self, command):
        p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = p.communicate()
        if p.returncode > 0:
            error = 'Error in command "%s":%s' % (" ".join(command), stderr.decode())

            raise Exception(error)

        return stdout.decode().strip()

class Git:
    def __init__(self, git_dir, process):
        self.git_dir = git_dir
        self.process = process

    def call(self,  arguments):
        command = ['git', '--git-dir', self.git_dir] + arguments

        return self.process.execute(command)

class Splitter:
    lock = Lock()

    def __init__(self, config, process, git, utils, logger):
        self.config = config
        self.git = git
        self.process = process
        self.utils = utils
        self.logger = logger

    def split(self, whitelist_references):
        self._init_workspace()
        self._split_project(whitelist_references)

    def _init_workspace(self):
        # Init cache repo
        if not os.path.exists(self.config.cache_dir):
            self.process.execute(['git', 'init', os.path.dirname(self.config.cache_dir)])

        # Init cache's remotes
        remotes = self.git.call(['remote', ]).splitlines()
        known_remotes = ['origin']
        for split in self.config.splits:
            for target in split['target']:
                remote = self.utils.sha256(target)
                if remote not in known_remotes:
                    known_remotes.append(remote)
                    target_url = self.utils.expandvars(target)
                    if remote in remotes:
                        self.git.call(['remote', 'set-url', remote, target_url])
                    else:
                        self.git.call(['remote', 'add', remote, target_url])
                self.logger.info('Fetching <comment>%s</>' % target)
                self.git.call(['fetch', '-p', remote])
        for remote in (x for x in remotes if x not in known_remotes):
            self.git.call(['remote', 'remove', remote])

        # pull code from project
        if 'origin' in self.git.call(['remote', ]).splitlines():
            self.git.call(['remote', 'set-url', 'origin', 'file://%s' % self.config.project_dir])
        else:
            self.git.call(['remote', 'add', 'origin', 'file://%s' % self.config.project_dir])
        self.git.call(['fetch', '-p', 'origin'])
        self.git.call(['fetch', '--tags', 'origin'])

    def _split_project(self, whitelist_references):
        pool = ThreadPool(8)
        pool.map(self._split_reference, self._get_split_references(whitelist_references))
        pool.close()
        pool.join()

    def _get_split_references(self, whitelist_references):
        for ref_pattern in self.config.origins:
            re_pattern = re.compile(ref_pattern)
            for (reference_ref, reference_sha1) in self._get_references('origin').items():
                reference_name = self._get_reference_name(reference_ref)
                if not reference_name:
                    continue
                if whitelist_references and reference_name not in whitelist_references:
                    continue
                if not re_pattern.match(reference_name):
                    continue

                yield (reference_sha1, reference_ref)

    def _split_reference(self, arguments):
        (reference_sha1, reference_ref) = arguments

        for split in self.config.splits:
            flag_source = 'refs/split-flag/source-%s-%s' % (self.utils.sha256(reference_ref), self.utils.sha256('-'.join(split['prefix'])))
            flag_target = 'refs/split-flag/target-%s-%s' % (self.utils.sha256(reference_ref), self.utils.sha256('-'.join(split['prefix'])))

            last_split = self._get_local_reference_sha1(flag_source)
            if last_split ==  reference_sha1:
                self.logger.debug('Already splitted <comment>%s</> for <comment>%s</>' % (reference_ref, ', '.join(split['prefix'])))
                split_sha1 = self._get_local_reference_sha1(flag_target)
            else:
                self.logger.info('Splitting <comment>%s</> for <comment>%s</>' % (reference_ref, ', '.join(split['prefix'])))

                args = []
                for prefix in split['prefix']:
                    args += ['-prefix', prefix]

                temp_branch = 'refs/split/%s' % reference_ref
                try:
                    self.git.call(['update-ref', temp_branch, reference_sha1])
                    self.lock.acquire()
                    split_sha1 = self.process.execute(['splitsh-lite', '-origin', temp_branch, '-path', self.config.cache_dir] + args)
                finally:
                    self.git.call(['update-ref', '-d', temp_branch])
                    self.lock.release()

                if not split_sha1:
                    self.git.call(['update-ref', flag_source, reference_sha1])
                else:
                    self.git.call(['update-ref', flag_target, split_sha1])
                    self.git.call(['update-ref', flag_source, reference_sha1])

            if not split_sha1:
                continue

            for target in split['target']:
                self._push_branch(split_sha1, reference_ref, target)

    remotes_references = {}
    def _get_references(self, remote):
        if not remote in self.remotes_references:
            self.remotes_references[remote] = dict([(x.split('\t', 2)[-1], x.split('\t', 2)[0]) for x in self.git.call(['ls-remote', remote]).splitlines()])
        return self.remotes_references[remote]

    local_references = None
    def _get_local_reference_sha1(self, reference):
        if self.local_references is None:
            self.local_references = dict([(x.split(' ', 2)[-1], x.split(' ', 2)[0]) for x in self.git.call(['show-ref']).splitlines()])

        if reference in self.local_references:
            return self.local_references[reference]

        return None

    def _get_reference_name(self, ref):
        for prefix in ['refs/tags/', 'refs/heads/']:
            if not ref.startswith(prefix):
                continue
            return ref[len(prefix):]

    def _push_branch(self, sha1, reference, target):
        remote = self.utils.sha256(target)

        remote_references = self._get_references(remote)
        if reference in remote_references and remote_references[reference] == sha1:
            self.logger.debug('Already pushed <comment>%s</> into <comment>%s</>' % (reference, target))
            return

        self.logger.info('Pushing <comment>%s</> into <comment>%s</>' % (reference, target))
        self.git.call(['push', '-f', remote, '%s:%s' % (sha1, reference)])


def main():
    logger = Logger()
    utils = Utils()
    process = Process()

    config = Config(utils)
    config.load_from_file(os.path.join(os.getcwd(), CONFIG_FILE))

    git = Git(config.cache_dir, process)

    splitter = Splitter(config, process, git, utils, logger)

    parser = argparse.ArgumentParser(description='Split git repository.')
    parser.add_argument('--ref', dest='references', metavar='BRANCH_OR_TAG', type=str, nargs='*',
                       help='git references (branch or tag) to process. When not set, process every references')

    args = parser.parse_args()
    splitter.split(args.references)

if __name__ == '__main__':
    main()
